{"version":3,"file":"static/css/383.ad048081.chunk.css","mappings":"AAEA,yBCsDM,kBALS,CD7Cf,iDCkDM,iBALS,CAKT,kBALS,CDxCf,yBEsBI,kBFrB0B,CAK5B,iCAEA,2BEyBA,YAlBU,CAWR,qBFzB8C,CAIhD,kBAEA,gBCsCI,mBALS,CAKT,gBDrCJ,CGuDE,wBH/DJ,yBAWI,mBACA,8BCiCE,8BALS,EDxBf,wBAKE,cACA,iCAHA,aACA,0BCyBI,mBALS,CAKT,gBDvBJ,CGyCE,wBH/CJ,wBASI,uCAIJ,wBEPI,kBFQoB,CEGtB,YAlBU,CAWR,qBFI4B,CEZ5B,sBFYY,CAEd,gBAEA,mCACE,8BG4BA,wBH7BF,mCAII,uBAKN,wBI/BE,aHoCE,YARW,CG7Bb,WJkCc,CGkBZ,wBHpBJ,wBI/BE,aADA,WJqCgB,EAIlB,4BAGE,eACA,mCCXI,kBALS,CAKT,eDWJ,CAGF,iFErCI,kBFwCoD,CE7BtD,aAHE,cFgCmE,CE5CnE,sBAHQ,CCgDR,wBHJJ,iFAMI,mBACA,4BAIJ,2BI1DE,YADA,UJ4DoB,CAGtB,2BAIE,iCIlEA,WJ+DmB,CC9Bf,gBALS,CAKT,iBALS,CG7Bb,SJmEA,CAGF,wBIrEE,YHiCI,gBALS,CG7Bb,UJwEc,CAEd,4BACE,iBK/FJ,yBAGE,iCJmDI,kBInDJ,CAGF,4BHyBI,kBGxB0B,CHmC5B,YAlBU,CEHV,YADA,UCZoB,CAGtB,yBHoBI,kBGnBoB,CH8BtB,YAlBU,CGPV,eADA,YHWE,sBGfY,CJ0CV,iBALS,CAKT,kBALS,CIlCb,iBAEA,CAEA,+BAOE,6BADA,SAGA,WDPF,UCDmB,CAGjB,OADA,kBAEA,QAGA,qCDPF,OCQE,CAGF,iFAEE,+BAKA,wDACE,WAKN,wBDvBE,YHiCI,iBALS,CG7Bb,UC0Bc,CAEd,4BACE,iBCjDJ,mBAGE,iCACA,sCJsCA,YAlBU,CInBV,YJsBE,sBItBF,CAGF,mBJuBI,kBIpBoB,CJ+BtB,YAlBU,CIVV,YJaE,sBIhBY,CL2CV,gBALS,CAKT,iBALS,CAKT,iBALS,CAKT,kBALS,CKpCb,iBACA,CH0DE,wBGhEJ,mBASI,gBAGF,yBAOE,6BADA,SAGA,WARc,WAGd,OADA,kBAEA,QAGA,qCARF,OASE,CAOF,gEACE,+BAEA,6CACE,WAKN,oBAGE,iCLSE,YKTF,CAGF,kBAME,mBAFA,aAIA,eAHA,kEAEA,gBLJI,mBALS,CAKT,gBKKJ,CHaE,wBGrBJ,kBLGM,8BALS,EEuBX,wBGrBJ,kBAYI,eADA,kEACA,EHSA,wBGrBJ,kBAgBI,oEAGF,oCAEE,mCADA,yBACA,yBAFF,oCAKI,gBAIJ,iCACE,gCAIJ,mBAEE,gBADA,iBACA,CAEA,gCACE,gBAIJ,mBC9FE,cACA,eACA,gBACA,uBACA,mBJqEE,wBGqBJ,mBJ9DI,kBIkE4B,CJvD9B,YAlBU,EI6EZ,mBAIE,aAAY,CFpFZ,WEkFc,CLjDV,iBALS,CG7Bb,UEqFA,CAEA,uBAGE,cFzFF,WEuFgB,CAGd,mBF3FF,UE2FE","sources":["modules/Scoreboard/index.module.scss","scss/abstract/helpers/mixins/_spacing.scss","scss/abstract/helpers/mixins/_flexbox.scss","scss/abstract/helpers/mixins/_breakpoints.scss","scss/abstract/helpers/mixins/_size.scss","modules/Navigation/index.module.scss","pages/Table/index.module.scss","scss/abstract/helpers/mixins/_ellipsis.scss"],"sourcesContent":["@import \"../../scss/config\";\n\n.block {\n  @include make-spacer('mb', 4);\n}\n\n.head,\n.body {\n  @include make-spacer('px', 2);\n}\n\n.head {\n  @include flex($align-items: center, $direction: column);\n  @include make-spacer('py', 2);\n  @include make-spacer('py', 0, md);\n\n  margin-bottom: 2px;\n  background-color: var(--material);\n  min-height: 45px;\n  color: var(--color-primary);\n\n  @include media-breakpoint-up(md) {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n}\n\n.body {\n  @include make-spacer('py', 4);\n\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 10px;\n  background-color: var(--material);\n\n  @include media-breakpoint-up(md) {\n    grid-template-columns: 300px 1fr 300px;\n  }\n}\n\n.cell {\n  @include flex(center, center, column);\n\n  min-height: 80px;\n\n  &:last-child {\n    flex-direction: column-reverse;\n\n    @include media-breakpoint-up(md) {\n      flex-direction: column;\n    }\n  }\n}\n\n.logo {\n  @include make-spacer('p', 2);\n  @include size(100px);\n\n  @include media-breakpoint-up(md) {\n    @include size(150px);\n  }\n}\n\n.nickname {\n  @include make-spacer('my', 2);\n\n  font-size: 20px;\n  font-weight: var(--typography-bold);\n}\n\n.wrapper,\n.league,\n.manager {\n  @include flex($justify-content: center, $align-items: center, $wrap: wrap);\n\n  @include media-breakpoint-up(md) {\n    flex-direction: row;\n    justify-content: flex-start;\n  }\n}\n\n.country {\n  @include size(30px, 15px);\n}\n\n.divider {\n  @include size(1px, 15px);\n  @include make-spacer('mx', 2);\n\n  background-color: var(--sub-text);\n}\n\n.icon {\n  @include make-spacer('mr', 1);\n  @include size(18px);\n\n  svg {\n    fill: var(--icon);\n  }\n}\n","// stylelint-disable at-rule-empty-line-before\n\n@function get-prop-name($prop) {\n  @if (index((m, mx, my, mt, mb, ml, mr), $prop)) {\n    @return margin;\n  } @else if (index((p, px, py, pt, pb, pl, pr), $prop)) {\n    @return padding;\n  } @else {\n    @return null;\n  }\n}\n\n@function get-prop-postfix-group($prop) {\n  $postfix-group: ();\n\n  @if (index((pl, ml, mx, px), $prop)) {\n    $postfix-group: append($postfix-group, -left);\n  }\n\n  @if (index((pr, mr, mx, px), $prop)) {\n    $postfix-group: append($postfix-group, -right);\n  }\n\n  @if (index((pt, mt, my, py), $prop)) {\n    $postfix-group: append($postfix-group, -top);\n  }\n\n  @if (index((pb, mb, my, py), $prop)) {\n    $postfix-group: append($postfix-group, -bottom);\n  }\n\n  @return $postfix-group;\n}\n\n@function get-prop-value($prop, $size, $spacers: $spacers) {\n  $length: map-get($spacers, $size);\n\n  @if (index((px, mx, pl, pr, ml, mr), $prop)) {\n    @return $length;\n  } @else if (index((py, my, pt, pb, mt, mb), $prop)) {\n    @return $length;\n  } @else if (index((p, m), $prop)) {\n    @return $length $length;\n  } @else {\n    @error '#{$prop} is invalid value';\n  }\n}\n\n@mixin _make-spacer($prop, $size) {\n  // stylelint-disable-line\n  $prop-name: get-prop-name($prop);\n  $prop-value: get-prop-value($prop, $size);\n  $prop-postfixes: get-prop-postfix-group($prop);\n\n  @if (length($prop-postfixes) > 0) {\n    @each $postfix in $prop-postfixes {\n      #{$prop-name}#{$postfix}: $prop-value;\n    }\n  } @else {\n    #{$prop-name}: $prop-value;\n  }\n}\n\n@mixin make-spacer($prop, $size, $breakpoint: null) {\n  @if ($breakpoint) {\n    @include media-breakpoint-up($breakpoint) {\n      @include _make-spacer($prop, $size);\n    }\n  } @else {\n    @include _make-spacer($prop, $size);\n  }\n}\n\n// @include make-spacer(mb, 2);\n// mb - margin-bottom\n// 2 - grid 2 points size (1 point for example 8px)\n","///\n/// Simple use Flexbox\n///\n/// @access public\n///\n/// @param {Sub-Property} $justify-content\n/// @param {Sub-Property} $align-items\n/// @param {Sub-Property} $direction\n/// @param {Sub-Property} $wrap\n/// @param {Sub-Property} $display\n/// @example scss - usage\n///\n/// .foo {\n///   @include flex(space-between, center, column, wrap);\n/// }\n/// or\n/// .foo {\n///   @include flex(space-between, center, $display: inline-flex);\n/// }\n///\n\n@mixin flex(\n  $justify-content: null,\n  $align-items: null,\n  $direction: null,\n  $wrap: null,\n  $display: flex\n) {\n  @if $justify-content != null {\n    justify-content: $justify-content;\n  }\n\n  @if $align-items != null {\n    align-items: $align-items;\n  }\n\n  @if $direction != null {\n    flex-direction: $direction;\n  }\n\n  @if $wrap != null {\n    flex-wrap: $wrap;\n  }\n\n  display: $display;\n}\n","// stylelint-disable at-rule-empty-line-before\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 40em, md: 75em, lg: 105em)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 40em, md: 75em, lg: 105em))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n\n  @return if(\n      $n < length($breakpoint-names),\n      nth($breakpoint-names, $n + 1),\n      null\n  );\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 40em, md: 75em, lg: 105em))\n//    40em\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  //@return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.01em, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between(\n  $lower,\n  $upper,\n  $breakpoints: $grid-breakpoints\n) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","///\n/// Ease to set the width and height values\n///\n/// Mixin make easy to set the value `width` and `height` in the same time.\n///\n/// @access public\n///\n/// @param {Length} $width - `width` element\n/// @param {Length} $height ($width) - `height` element\n///\n/// @example scss - usage\n///   .foo {\n///     @include size(10em);\n///   }\n///\n///   .bar {\n///    @include size(100%, 10em);\n///   }\n///\n/// https://sass-guidelin.es/ru/#section-33\n\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n","@import \"../../scss/config\";\n\n.block {\n  @include make-spacer('mb', 4);\n\n  background-color: var(--material);\n}\n\n.wrapper {\n  @include flex($align-items: center);\n  @include size(100%, 45px);\n}\n\n.link {\n  @include flex(center, center);\n  @include make-spacer('px', 2);\n\n  position: relative;\n  height: 100%;\n  font-size: 14px;\n\n  &::after {\n    @include size(0, 2px);\n\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--link);\n    transition: var(--default-transition);\n    content: '';\n  }\n\n  &:hover,\n  &.active {\n    color: var(--text-for-material);\n  }\n\n  &.active {\n\n    &::after {\n      width: 100%;\n    }\n  }\n}\n\n.icon {\n  @include make-spacer('mr', 2);\n  @include size(20px);\n\n  svg {\n    fill: var(--icon);\n  }\n}\n","@import \"../../scss/config\";\n\n.sort {\n  @include flex(center);\n\n  background-color: var(--material);\n  border-bottom: 1px solid var(--border);\n  height: 40px;\n}\n\n.link {\n  @include make-spacer('px', 4);\n  @include make-spacer('mx', 4);\n  @include flex(center, center);\n\n  position: relative;\n  height: 100%;\n\n  @include media-breakpoint-up(md) {\n    font-size: 14px;\n  }\n\n  &::after {\n    @include size(0, 2px);\n\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--link);\n    transition: var(--default-transition);\n    content: '';\n  }\n\n  &:hover {\n    color: var(--text-for-material);\n  }\n\n  &.active {\n    color: var(--text-for-material);\n\n    &::after {\n      width: 100%;\n    }\n  }\n}\n\n.table {\n  @include make-spacer('p', 2);\n\n  background-color: var(--material);\n}\n\n.row {\n  @include make-spacer('py', 2);\n  @include make-spacer('py', 0, md);\n\n  display: grid;\n  grid-template-columns: 30px 1fr repeat(3, 30px) 50px repeat(2, 30px);\n  align-items: center;\n  min-height: 38px;\n  font-size: 12px;\n\n  @include media-breakpoint-up(sm) {\n    grid-template-columns: 50px 1fr repeat(3, 50px) 100px repeat(2, 50px);\n    font-size: 14px;\n  }\n\n  @include media-breakpoint-up(md) {\n    grid-template-columns: 75px 1fr repeat(3, 75px) 100px repeat(2, 75px);\n  }\n\n  &.head {\n    text-transform: capitalize;\n    font-weight: var(--typography-bold);\n\n    @include media-breakpoint-up(md) {\n      font-size: 14px;\n    }\n  }\n\n  &:nth-child(odd) {\n    background-color: var(--primary);\n  }\n}\n\n.cell {\n  text-align: center;\n  overflow: hidden;\n\n  &:nth-child(2) {\n    text-align: left;\n  }\n}\n\n.team {\n  @include ellipsis();\n\n  @include media-breakpoint-up(md) {\n    @include flex($align-items: center);\n  }\n}\n\n.logo {\n  @include make-spacer('mr', 2);\n  @include size(20px);\n\n  flex-shrink: 0;\n\n  img {\n    @include size(100%);\n\n    display: block;\n    object-fit: contain;\n  }\n}\n","@mixin ellipsis {\n  display: block;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n"],"names":[],"sourceRoot":""}